<pre class='metadata'>
Title: Add the missing empty() to mdspan
H1: Add the missing <code>empty()</code> to <code>mdspan</code>
Shortname: D2613
Revision: 0
Audience: LEWG, LWG
Status: D
Group: WG21
!Target: C++23
URL: https://wg21.link/DXXXXR0
!Source: <a href="https://github.com/Mick235711/wg21-papers/blob/main/draft-empty.bs">github.com/Mick235711/wg21-papers/blob/main/draft-empty.bs</a>
!Issue Tracking: <a href="https://github.com/Mick235711/wg21-papers/issues">GitHub Mick235711/wg21-papers</a>
Editor: Yihe Li, winmikedows@hotmail.com
No abstract: true
Date: 2022-06-22
Markup Shorthands: markdown yes
</pre>

<style>
table, th, td { border:1px solid grey; }
</style>

This paper propose to fix a defect in [[!P0009R17]]. During its LWG review, I found that even though the proposed `std::mdspan` type have a `size()` member function,
it does not have an `empty()` member function, which makes it distinct from nearly all other STL containers. So this paper propose to add the missing member to increase consistency and performance of common operations.

# Revision History # {#revisions}

## R0 ## {#r0}
Initial revision.

# Motivation # {#motivation}

Consistency among library types is important and makes user interaction intuitive. Also, adding `empty()` does have performance optimization chance in common implementations.
If we survey the current STL containers, we can summarize as a table for their `empty()` and `size()` behavior:

<table>
<thead>
<tr>
    <td>Having `size()` without `empty()`</td>
    <td>Having both `size()` and `empty()`</td>
    <td>Having `empty()` without `size()`</td>
</tr>
</thead>
<tbody>
<tr>
    <td>`std::bitset`<br />`std::initializer_list`</td>
    <td>`std::vector`<br />`std::list`<br />`std::deque`<br />`std::span`<br />...</td>
    <td>`std::forward_list`</td>
</tr>
</tbody>
</table>

We can see a clear trend in the STL to provide `empty()` with `size()` concurrently whenever possible. The only containers in STL that has `size()` but not `empty()` are some of the fixed-sized containers like `std::bitset`, for which
`empty()` does not makes sense. Conversely, even though `std::forward_list` cannot provide `size()` due to not storing this information, it still provides `empty()` for convenience. More importantly, `std::span` provide an `empty()`
too, and since `mdspan` is modeled as a higher-dimensional `std::span`, it should have an `empty()` alongside its `size()` too.

Apart from the consistency motivation, the introduction of `empty()` can have real performance gains to users, since under the as-if wording it is just specified as "the same behaviour as `size() == 0`", but
a good implementation can avoid calling `size()` entirely. For example, since `size()` is specified (through <code>std::extents::<i>fwd-prod-of-extents</i></code>) to perform a multiplication on all the extents,
`empty()` can simply be implemented as checking whether all the extents are greater than zero, which can be substantially faster than multiplication. This possibility of better performance is also why we were told to rely on `empty()`
instead of doing `size() == 0`. Not including `empty()` will both create surprise for users, and also force them to resort to a worse approach to check emptiness.

# Design # {#design}

The design of the member function follows that of `std::span`. Which means that it is marked `const`, `noexcept`, and `[[nodiscard]]`.

In theory, since this is a pure addition, it can be done after C++23 ships. However, I would argue (and the `mdspan` authors also agree) that not having both `empty()` and `size()`
in [[!P0009R17]] is simply a design mistake, and delay the addition will cause significant user confusion.

# Wording # {#wording}

The wording below is based on [[!P0009R17]].

## 24.7.� Class template `mdspan` [mdspan.mdspan] ## {#mdspan.mdspan}
### 24.7.�.1 Overview [mdspan.mdspan.overview] ### {#mdspan.mdspan.overview}
<pre>
namespace std {

template&lt;class ElementType, class Extents, class LayoutPolicy, class AccessorPolicy&gt;
class mdspan {
public:
  using extents_type = Extents;
  using layout_type = LayoutPolicy;
  using accessor_type = AccessorPolicy;
  using mapping_type = typename layout_type::template mapping&lt;extents_type&gt;;
  using element_type = ElementType;
  using value_type = remove_cv_t&lt;element_type&gt;;
  using size_type = typename extents_type::size_type ;
  using rank_type = typename extents_type::rank_type ;
  using pointer = typename accessor_type::pointer;
  using reference = typename accessor_type::reference;

  static constexpr rank_type rank() { return extents_type::rank(); }
  static constexpr rank_type rank_dynamic() { return extents_type::rank_dynamic(); }
  static constexpr size_t static_extent(rank_type r) { return extents_type::static_extent(r); }
  constexpr size_type extent(rank_type r) const { return extents().extent(r); }

  // [mdspan.mdspan.ctor], mdspan Constructors
  constexpr mdspan();
  constexpr mdspan(const mdspan& rhs) = default;
  constexpr mdspan(mdspan&& rhs) = default;

  template&lt;class... SizeTypes&gt;
    explicit constexpr mdspan(pointer ptr, SizeTypes... exts);
  template&lt;class SizeType, size_t N&gt;
    explicit(N != rank_dynamic())
    constexpr mdspan(pointer p, span&lt;SizeType, N&gt; exts);
  template&lt;class SizeType, size_t N&gt;
    explicit(N != rank_dynamic())
    constexpr mdspan(pointer p, const array&lt;SizeType, N&gt;& exts);
  constexpr mdspan(pointer p, const extents_type& ext);
  constexpr mdspan(pointer p, const mapping_type& m);
  constexpr mdspan(pointer p, const mapping_type& m, const accessor_type& a);

  template&lt;class OtherElementType, class OtherExtents, 
           class OtherLayoutPolicy, class OtherAccessorPolicy&gt;
    explicit(see below)
    constexpr mdspan(
      const mdspan&lt;OtherElementType, OtherExtents, 
                   OtherLayoutPolicy, OtherAccessorPolicy&gt;& other);

  constexpr mdspan& operator=(const mdspan& rhs) = default;
  constexpr mdspan& operator=(mdspan&& rhs) = default;

  // [mdspan.mdspan.members], mdspan members
  template&lt;class... SizeTypes&gt;
    constexpr reference operator[](SizeTypes... indices) const;
  template&lt;class SizeType&gt;
    constexpr reference operator[](span&lt;SizeType, rank()&gt; indices) const;
  template&lt;class SizeType&gt;
    constexpr reference operator[](const array&lt;SizeType, rank()&gt;& indices) const;

  constexpr size_t size() const;
  <ins>[[nodiscard]] constexpr bool empty() const noexcept;</ins>

  friend constexpr void swap(mdspan& x, mdspan& y) noexcept;

  constexpr const extents_type& extents() const { return <i>map_</i>.extents(); }
  constexpr const pointer& data() const { return <i>ptr_</i>; }
  constexpr const mapping_type& mapping() const { return <i>map_</i>; }
  constexpr const accessor_type& accessor() const { return <i>acc_</i>; }

  static constexpr bool is_always_unique() {
    return mapping_type::is_always_unique();
  }
  static constexpr bool is_always_contiguous() {
    return mapping_type::is_always_contiguous();
  }
  static constexpr bool is_always_strided() {
    return mapping_type::is_always_strided();
  }

  constexpr bool is_unique() const {
    return <i>map_</i>.is_unique();
  }
  constexpr bool is_contiguous() const {
    return <i>map_</i>.is_contiguous();
  }
  constexpr bool is_strided() const {
    return <i>map_</i>.is_strided();
  }
  constexpr size_type stride(rank_type r) const {
    return <i>map_</i>.stride(r);
  }

private:
  accessor_type <i>acc_</i>; // exposition only
  mapping_type <i>map_</i>; // exposition only
  pointer <i>ptr_</i>; // exposition only
};

template &lt;class CArray&gt;
requires(is_array_v&lt;CArray&gt; && rank_v&lt;CArray&gt;==1)
mdspan(CArray&)
  -&gt; mdspan&lt;remove_all_extents_t&lt;CArray&gt;, extents&lt;size_t, extent_v&lt;CArray, 0&gt;&gt;&gt;

template &lt;class Pointer&gt;
requires(!is_array_v&lt;Pointer&gt; && is_pointer_v&lt;Pointer&gt;)
mdspan(Pointer&)
  -&gt; mdspan&lt;remove_pointer_t&lt;Pointer&gt;, extents&lt;size_t&gt;&gt;&gt;

template &lt;class ElementType, class... Integrals&gt;
requires((is_convertible_v&lt;Integrals, size_t&gt; && ...) && sizeof...(Integrals) &gt; 0)
explicit mdspan(ElementType*, Integrals...)
  -&gt; mdspan&lt;ElementType, dextents&lt;size_t, sizeof...(Integrals)&gt;&gt;;

template &lt;class ElementType, class SizeType, size_t N&gt;
mdspan(ElementType*, span&lt;SizeType, N&gt;)
  -&gt; mdspan&lt;ElementType, dextents&lt;size_t, N&gt;&gt;;

template &lt;class ElementType, class SizeType, size_t N&gt;
mdspan(ElementType*, const array&lt;SizeType, N&gt;&)
  -&gt; mdspan&lt;ElementType, dextents&lt;size_t, N&gt;&gt;;

template &lt;class ElementType, class MappingType&gt;
mdspan(ElementType*, const MappingType&)
  -&gt; mdspan&lt;ElementType, typename MappingType::extents_type,
            typename MappingType::layout_type&gt;;

template &lt;class ElementType, class MappingType, class AccessorType&gt;
mdspan(ElementType*, const MappingType&, const AccessorType&)
  -&gt; mdspan&lt;ElementType, typename MappingType::extents_type, 
            typename MappingType::layout_type, AccessorType&gt;;

}
</pre>

### 24.7.�.3 Members [mdspan.mdspan.members] ### {#mdspan.mdspan.members}
[...]

```cpp
constexpr size_type size() const;
```

*Precondition*: The size of the multidimensional index space `extents()` is a representable value of type `size_type` ([basic.fundamental]).

*Returns*: <code>extents().<i>fwd-prod-of-extents</i>(rank())</code>.

<pre>
<ins>
[[nodiscard]] constexpr bool empty() const noexcept;
</ins>
</pre>

<ins>*Effects*: Equivalent to: `return size() == 0;`</ins>

```cpp
friend constexpr void swap(mdspan& x, mdspan& y) noexcept;
```

*Effects*: Equivalent to:
<pre>
swap(x.<i>ptr_</i>, y.<i>ptr_</i>);
swap(x.<i>map_</i>, y.<i>map_</i>);
swap(x.<i>acc_</i>, y.<i>acc_</i>);
</pre>

<pre class=biblio>
{
    "P0009R17": {
        "authors": [
            "Christian Trott",
            "D.S. Hollman",
            "Damien Lebrun-Grandie",
            "Mark Hoemmen",
            "Daniel Sunderland",
            "H. Carter Edwards",
            "Bryce Adelstein Lelbach",
            "Mauro Bianco",
            "Ben Sander",
            "Athanasios Iliopoulos",
            "John Michopoulos",
            "Nevin Liber"
        ],
        "href": "https://wg21.link/p0009r17",
        "title": "MDSPAN"
    }
}
</pre>

